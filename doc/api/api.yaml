openapi: 3.0.1

info:
  title: MANVSim API
  description: The specification for the API the app uses to communicate with the server.
  version: 0.1.0

paths:

  /tan/login:
    post:
      summary: TAN Login
      description: authenticates a user with a TAN and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tan:
                  type: string
                  description: User TAN
                  example: "123456"
      responses:
        '200':
          description: TAN valid
          headers:
            Authorization:
              description: JWT-Token
              schema:
                type: string
                example: "Bearer <JWT-Token>"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCreationRequired:
                    type: boolean
                    description: indicates if name for the TAN was already set.
                    example: false
                  userName:
                    type: string
                    description: name for the TAN, if userCreationRequired is false. Otherwise null.
                    example: "John Doe"
                  userRole:
                    type: string
                    description: role of the user.
                    example: "Notarzt"
        '400':
          description: Invalid TAN
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid TAN."

  /tan/set-name:
    post:
      summary: Set username for the TAN
      description: Sets the name for the TAN provided in JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: username to be set.
                  example: "John Doe"
      responses:
        '200':
          description: successfully set username.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Name successfully set for TAN."
        '400':
          description: Invalid request. The name was already set.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request. Name already set"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized."

      security:
        - bearerAuth: [ ]


  /scenario/start-time:
    get:
      summary: Get start time of scenario and arrival time.
      description: Get start time of scenario and time to arrive at the scene.
      responses:
        '200':
          description: success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenarioStartTime:
                    type: integer
                    description: timestamp unix ms since epoch.
                    example: 1672531200
                  arrivalTime:
                    type: integer
                    description: timestamp unix ms since epoch.
                    example: 1672531200

        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized."

      security:
        - bearerAuth: []
  /{gameId}/patients:
    get:
      summary: Returns a list of patients.
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: userTan
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
              example:
                - id: 1
                  name: Max Mustermann
                  injuries: Beinverletzung
                - id: 2
                  name: Bernd Beispiel
                  injuries: Offene Blutung
                - id: 3
                  name: Patient 3
                  injuries: SHT
                - id: 4
                  name: Ronald Lyons
                  injuries: Bein fehlt
      security:
        - bearerAuth: [ ]

  /{gameId}/patients/{patientId}:
    get:
      summary: Returns a specified patient.
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: userTan
          in: query
          required: true
          schema:
            type: string
        - name: patientId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A patient specified by patientId.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
              example:
                id: 4
                name: Ronald Lyons
                injuries: Bein fehlt
        '404':
          description: Patient with patientId could not be found.
      security:
        - bearerAuth: [ ]

  /patients/{patientId}/open:
    post:
      summary: Opens a patient profile
      description: Opens a patient profile. Other users can see who is currently treating the patient.
      parameters:
        - name: patientId
          in: path
          required: true
          schema:
            type: string
            description: patient id.
            example: "patient123"
      responses:
        '200':
          description: success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Patient profile successfully opened."

        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized."
        '404':
          description: Patient with patientId could not be found.
      security:
        - bearerAuth: []

  /patients/{patientId}/close:
    post:
      summary: closes a patient profile
      description: Closes a patient profile. Other users can no longer see the username in the list of treating users.
      parameters:
        - name: patientId
          in: path
          required: true
          schema:
            type: string
            description: patient id.
            example: "patient123"
      responses:
        '200':
          description: success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Patient profile successfully closed."

        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized."
        '404':
          description: Patient with patientId could not be found.
      security:
        - bearerAuth: []


  /{gameId}/locations:
    get:
      summary: Returns a list of locations (available to the user).
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: userTan
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
              example:
                - id: 1
                  name: Roter Rucksack
                  resources:
                    - id: 1
                      name: Schere
                      quantity: 20
                    - id: 40
                      name: Pflaster
                      quantity: 7
                  locations:
                    - id: 2
                      name: Medikamententasche
                      resources:
                        - id: 2
                          name: Schmerzmittel
                          quantity: 30
                      locations: [ ]
                - id: 3
                  name: RTW
                  resources:
                    - id: 3
                      name: EKG
                      quantity: 120
                  locations:
                    - id: 4
                      name: Medizinschrank
                      resources:
                        - id: 4
                          name: Starkes Schmerzmittel
                          quantity: 50
                      locations: [ ]
      security:
        - bearerAuth: [ ]

  /{gameId}/actions:
    get:
      summary: Returns a list of actions available to the user.
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: userTan
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
              example:
                - id: 1
                  name: Pflaster anbringen
                  durationInSeconds: 10
                  resourceNamesNeeded:
                    - Pflaster
                - id: 2
                  name: Klamotten aufschneiden
                  durationInSeconds: 4
                  resourceNamesNeeded:
                    - Schere
                - id: 3
                  name: Schmerzmittel verabreichen
                  durationInSeconds: 20
                  resourceNamesNeeded:
                    - Schmerzmittel
      security:
        - bearerAuth: [ ]
  /{gameId}/actions/{actionId}:
    post:
      summary: Performs an action.
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: userTan
          in: query
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        '200':
          description: The id of the resulting performed action.
          content:
            application/json:
              schema:
                type: integer
              example: 5
      security:
        - bearerAuth: [ ]
  /{gameId}/actions/result/{performedActionId}:
    get:
      summary: Gets the result of a performed action.
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: userTan
          in: query
          required: true
          schema:
            type: string
        - name: performedActionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The result of the performed action.
          content:
            application/json:
              schema:
                type: string
              example: Die Maßnahme war erfolgreich.
      security:
        - bearerAuth: [ ]

  /notifications:
    get:
      summary: notification polling
      description: Returns a list of notifications for the user after lastPollTime.
      parameters:
        - name: lastPollTime
          in: query
          required: false
          schema:
            type: string
            format: date-time
            description: timestamp in ISO 8601 Format
            example: "2023-01-01T12:00:00Z"
      responses:
        '200':
          description: success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      type: object
                      properties:
                        header:
                          type: string
                          description: header of the notification.
                          example: "Example Notification"
                        message:
                          type: string
                          description: The message itself.
                          example: "Example Notifications content."
                        timestamp:
                          type: string
                          format: date-time
                          description: timestamp in ISO 8601 Format.
                          example: "2023-01-01T12:30:00Z"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized."
      security:
        - bearerAuth: []
components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    Patient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        injuries:
          type: string
        treatingUsers:
          type: array
          items:
            type: string

    Location:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'

    Resource:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantity:
          type: integer

    Action:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        durationInSeconds:
          type: integer
        resourceNamesNeeded:
          type: array
          items:
            type: string

